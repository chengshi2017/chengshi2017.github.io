<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sunny</title>
  
  <subtitle>个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-05T09:49:52.415Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Sunny</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git总结</title>
    <link href="http://yoursite.com/2018/01/04/git/"/>
    <id>http://yoursite.com/2018/01/04/git/</id>
    <published>2018-01-04T09:58:24.000Z</published>
    <updated>2018-01-05T09:49:52.415Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git-简介"><a href="#git-简介" class="headerlink" title="git 简介"></a>git 简介</h2><p><a href="https://baike.baidu.com/item/GIT/12647237?fr=aladdin" target="_blank" rel="noopener">git</a> 是一款分布式的版本控制系统，其核心是分支，分支的意义在于可以将项目代码按照功能和模块拆分为不同的分支。<br>在 git 中，工作目录下面的所有文件都不外乎两种状态： <strong>已跟踪</strong>和<strong>未跟踪</strong>。已跟踪文件是指已经被纳入git中，在版本控制器中有它们的记录，但是当我们对文件进行修改之后，文件变得和git中的不一样，那么它就属于未跟踪文件。初次克隆某个仓库时，所有文件都属于已跟踪文件。</p><h2 id="git-常用指令"><a href="#git-常用指令" class="headerlink" title="git 常用指令"></a>git 常用指令</h2><h3 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a><font color="#ff0000">git pull</font></h3><p>作用</p><blockquote><p>将远程代码仓库里的代码下载下来并自动整合到当前工作分支</p></blockquote><p>用法： <strong>git pull origin master</strong></p><p>将origin这个版本库中的代码更新到本地的master主支，类似于SVN的<font color="#99ff00">update</font></p><h3 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a><font color="#ff0000">git add</font></h3><p>作用</p><blockquote><p>是将当前更改或者新增的文件加入到Git的索引中，加入到Git的索引中就表示记入了版本历史中，这也是提交之前所需要执行的一步</p></blockquote><p>用法： <strong>git add app/model/user.java</strong></p><p>增加app/model/user.java文件到Git的索引中,该功能类似于SVN的<font color="#99ff00">add</font></p><h3 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a><font color="#ff0000">git rm</font></h3><p>作用</p><blockquote><p>从当前的工作空间中和索引中删除文件</p></blockquote><p>用法： <strong>git rm app/model/user.java</strong></p><p>删除工作空间中或者索引中的app/model/user.java文件，该功能类似于SVN的<font color="#99ff00">rm、del</font></p><h3 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a><font color="#ff0000">git commit</font></h3><p>作用</p><blockquote><p>将所有添加到索引库的文件添加到本地仓库<br>文件一旦commit之后，就会在git中形成一个历史版本，以后无论怎么变都能够找到此次提交的记录。</p></blockquote><p>用法： <strong>git commit -m story #3, add user model</strong> </p><p>提交的时候必须用-m来输入一条提交信息，该功能类似于SVN中的<font color="#99ff00">commit</font></p><h3 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a><font color="#ff0000">git push</font></h3><p>作用</p><blockquote><p>将本地仓库中的修改推送到远程仓库</p></blockquote><p>用法：<strong>git push origin</strong></p><p>将本地的代码推送到名为origin的远程版本库中</p><h3 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a><font color="#ff0000">git log</font></h3><p>作用</p><blockquote><p>查看git的历史日志</p></blockquote><p>该功能类似于SVN的<font color="#99ff00">log</font></p><h3 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a><font color="#ff0000">git revert</font></h3><p>作用</p><blockquote><p>还原一个版本的修改，必须提供一个具体的Git版本号，Git的版本号都是生成的一个哈希值</p></blockquote><p>用法：<strong>git revert bbaf6fb5060b4875b18ff9ff637ce118256d6f20</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;git-简介&quot;&gt;&lt;a href=&quot;#git-简介&quot; class=&quot;headerlink&quot; title=&quot;git 简介&quot;&gt;&lt;/a&gt;git 简介&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://baike.baidu.com/item/GIT/12647237?fr=
      
    
    </summary>
    
      <category term="环境" scheme="http://yoursite.com/categories/%E7%8E%AF%E5%A2%83/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>多线程的几种实现方式</title>
    <link href="http://yoursite.com/2018/01/02/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/01/02/多线程的几种实现方式/</id>
    <published>2018-01-02T13:22:11.000Z</published>
    <updated>2018-01-07T12:05:39.565Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是线程？"><a href="#什么是线程？" class="headerlink" title="什么是线程？"></a>什么是线程？</h3><blockquote><p>线程是指程序在执行过程中，能够执行程序程序代码的一个执行单元。在Java语言中，线程有四种状态：运行、就绪、挂起和结束。</p></blockquote><a id="more"></a><h3 id="为什么要使用多线程"><a href="#为什么要使用多线程" class="headerlink" title="为什么要使用多线程"></a>为什么要使用多线程</h3><ul><li>使用多哦线程可以减少程序的相应时间。</li><li>多CPU或多核计算机本身就具有执行多线程的能力。</li><li>与进程相比，线程的创建和切换开销更小。</li><li>使用多线程能简化程序的结构，使程序便于维护和理解。一个非常复杂的进程可以分成多个线程来执行。</li></ul><h3 id="基本的线程机制"><a href="#基本的线程机制" class="headerlink" title="基本的线程机制"></a>基本的线程机制</h3><p>在使用线程时，CPU将轮流给每个任务分配其占用时间。每个任务都觉得自己在一直占用着CPU,但事实上CPU时间是划分成片段分配给所有的任务。线程可以使你从这个层次抽身出来。<br><em>注意：当系统使用时间切片机制时，CPU轮流给每个任务分配时间，例如Windows（线程优先级和时间片轮转调度）操作系统。但有些操作系统采用FIFO模型，除非有高优先级的线程被唤醒，否则当前线程将一直运行，直至阻塞或终止。</em></p><h3 id="如何实现Java多线程"><a href="#如何实现Java多线程" class="headerlink" title="如何实现Java多线程"></a>如何实现Java多线程</h3><h4 id="继承Thread类，重写run-方法"><a href="#继承Thread类，重写run-方法" class="headerlink" title="继承Thread类，重写run()方法"></a>继承Thread类，重写run()方法</h4><p>Thread 本质上也是实现了Runnable接口的一个实例，它代表一个线程的实例，并且，<br>启动线程的唯一方法就是通过Thread类的start()方法。start()方法是一个native(本地)方法，它将启动一个新线程，并执行一个run()方法(Thread中提供的run()方法是一个空方法)。<br>这种方式通过自定义直接继承Thread，并重写run()方法，就可以启动新线程并执行自己定义的run()方法。<br><strong>调用start()方法后并不是立即执行多线程代码，而是使得该线程变成可运行态，什么时候运行多线程是由CPU调度决定的</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class MyThread extends Thread&#123;</span><br><span class="line">     public void run()&#123;</span><br><span class="line">         System.out.println(&quot;Thread body&quot;);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> public class Test&#123;</span><br><span class="line">     public static void main(String[] args)&#123;</span><br><span class="line">         MyThread thread=new MyThread();</span><br><span class="line">         thread.run();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="实现Runnable接口，并实现该接口的run-方法"><a href="#实现Runnable接口，并实现该接口的run-方法" class="headerlink" title="实现Runnable接口，并实现该接口的run()方法"></a>实现Runnable接口，并实现该接口的run()方法</h4><p><strong>主要步骤：</strong><br>1） 自定义类并实现Runnable接口，并实现run()方法。<br>2） 创建Thread对象，用实现Runnable接口的对象作为参数实例化该Thread对象。<br>3） 调用Thread的start()方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class MyThread implements Runnable&#123;</span><br><span class="line">    public void run()&#123;</span><br><span class="line">        System.out.println(&quot;Thread body&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        MyThread thread=new MyThread();</span><br><span class="line">        Thread t=new Thread(thread);</span><br><span class="line">        t.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 以上两种是实现多线程最常用的方法。<br> 其实不管是通过继承Thread类还是通过使用Runnable接口来实现多线程的方法，最终还是通过Thread的对象的API来控制线程的。</p><h4 id="实现Callable接口，重写call-方法"><a href="#实现Callable接口，重写call-方法" class="headerlink" title="实现Callable接口，重写call()方法"></a>实现Callable接口，重写call()方法</h4><p>Callable接口实际上是属于Executor框架的功能类，Callable接口与Runnable接口的功能类类似，但提供了比Runnable更强大的功能，主要表现在以下三点：<br><strong>1）Callable可以在任务结束后提供一个返回值，Runnable无法提供这个功能。</strong><br><strong>2）Callable中的call()方法可以抛出异常，而Runnable的run()方法无法抛出异常。</strong><br><strong>3）运行Callable可以拿到一个Future对象，Future对象表示异步计算的结果，可以使用Future来监视目标线程调用call()方法的情况，当调用Future的get()方法以获取结果时，当前线程就会阻塞，直到call()方法结束返回结果。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class CallableAndFuture&#123;</span><br><span class="line">    //创建线程类</span><br><span class="line">    public static class CallableTest implements Callable&lt;String&gt;&#123;</span><br><span class="line">        @Override</span><br><span class="line">        public String call() throws Exception &#123;</span><br><span class="line">            return &quot;欢迎来到我的博客！&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        ExecutorService threadPool= Executors.newSingleThreadExecutor();</span><br><span class="line">        //启动线程</span><br><span class="line">        Future&lt;String&gt; future=threadPool.submit(new CallableTest());</span><br><span class="line">        try &#123;</span><br><span class="line">            System.out.println(&quot;waiting thread to finish&quot;);</span><br><span class="line">            //等待线程结束，并获取返回结果</span><br><span class="line">            System.out.println(future.get());</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述程序的输出结果为：<br><img src="http://p25wdbssm.bkt.clouddn.com/blog.png" alt=""></p><p>以上3中方式中，前两种方式线程执行完后都没有返回值，只有最后一种带有返回值的，但是当需要使用多线程时，一般最好是使用实现Runnable接口的方式。<br>因为Thread类定义的多中方法可以被派生类使用或者重写。但是只有run()方法是必须被重写的，在run()方法中实现了这个线程的主要功能。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是线程？&quot;&gt;&lt;a href=&quot;#什么是线程？&quot; class=&quot;headerlink&quot; title=&quot;什么是线程？&quot;&gt;&lt;/a&gt;什么是线程？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;线程是指程序在执行过程中，能够执行程序程序代码的一个执行单元。在Java语言中，线程有四种状态：运行、就绪、挂起和结束。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="线程" scheme="http://yoursite.com/categories/%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="后端" scheme="http://yoursite.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/01/02/hello-world/"/>
    <id>http://yoursite.com/2018/01/02/hello-world/</id>
    <published>2018-01-02T10:52:14.411Z</published>
    <updated>2018-01-02T10:52:14.412Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
