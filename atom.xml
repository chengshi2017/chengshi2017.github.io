<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sunny</title>
  
  <subtitle>个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-10T12:40:57.247Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Sunny</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>IDEA中使用mybatis generator逆向工程生成代码</title>
    <link href="http://yoursite.com/2018/01/10/IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8mybatis%20generator%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81/"/>
    <id>http://yoursite.com/2018/01/10/IDEA中使用mybatis generator逆向工程生成代码/</id>
    <published>2018-01-10T12:13:11.703Z</published>
    <updated>2018-01-10T12:40:57.247Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍下如何在idea中利用Maven工具逆向生成mybatis代码</p><p><strong>1. 在maven中配置pom.xml文件</strong></p><p>在pom.xml的<build></build>中加入如下插件：</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--mybatis 逆向工程--&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.3.2&lt;/version&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;verbose&gt;true&lt;/verbose&gt;</span><br><span class="line">        &lt;overwrite&gt;true&lt;/overwrite&gt;</span><br><span class="line">    &lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><p>配置好maven插件后，进行下一步。</p><p><strong>2. 添加逆向工程的配置文件</strong></p><p>在resources目录下新建一个generatorConfig.xml文件，然后将如下配置文件拷贝到上面建的文件中。<br>maven的项目配置文件存放位置如下：</p><p><img src="http://p25wdbssm.bkt.clouddn.com/mybatis.png" alt=""></p><p>generatorConfig.xml文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE generatorConfiguration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;generatorConfiguration&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--classPathEntry:数据库的JDBC驱动 --&gt;</span><br><span class="line">    &lt;classPathEntry location=&quot;F:\.m2\repository\mysql\mysql-connector-java\5.1.34\mysql-connector-java-5.1.34.jar&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--&amp;lt;!&amp;ndash;导入属性配置&amp;ndash;&amp;gt;--&gt;</span><br><span class="line">    &lt;!--&lt;properties resource=&quot;jdbc.properties&quot;&gt;&lt;/properties&gt;--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;context id=&quot;default&quot; targetRuntime=&quot;MyBatis3&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- optional，旨在创建class时，对注释进行控制 --&gt;</span><br><span class="line">        &lt;commentGenerator&gt;</span><br><span class="line">            &lt;property name=&quot;suppressDate&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">            &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;/commentGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--jdbc的数据库连接 --&gt;</span><br><span class="line">        &lt;jdbcConnection</span><br><span class="line">                driverClass=&quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">                connectionURL=&quot;jdbc:mysql://localhost:3306/cms&quot;</span><br><span class="line">                userId=&quot;root&quot;</span><br><span class="line">                password=&quot;sky&quot;&gt;</span><br><span class="line">        &lt;/jdbcConnection&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制--&gt;</span><br><span class="line">        &lt;javaTypeResolver&gt;</span><br><span class="line">            &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">        &lt;/javaTypeResolver&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!-- Model模型生成器,用来生成含有主键key的类，记录类 以及查询Example类</span><br><span class="line">            targetPackage     指定生成的model生成所在的包名</span><br><span class="line">            targetProject     指定在该项目下所在的路径</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;javaModelGenerator targetPackage=&quot;com.spring.cms.model.vo&quot;</span><br><span class="line">                            targetProject=&quot;src/main/java&quot;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- 是否允许子包，即targetPackage.schemaName.tableName --&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">            &lt;!-- 是否对model添加 构造函数 --&gt;</span><br><span class="line">            &lt;property name=&quot;constructorBased&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">            &lt;!-- 是否对类CHAR类型的列的数据进行trim操作 --&gt;</span><br><span class="line">            &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">            &lt;!-- 建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法 --&gt;</span><br><span class="line">            &lt;property name=&quot;immutable&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">        &lt;/javaModelGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--Mapper映射文件生成所在的目录 为每一个数据库的表生成对应的SqlMap文件 --&gt;</span><br><span class="line">        &lt;sqlMapGenerator targetPackage=&quot;mapper&quot;</span><br><span class="line">                         targetProject=&quot;src/main/resources&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">        &lt;/sqlMapGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 客户端代码，生成易于使用的针对Model对象和XML配置文件 的代码</span><br><span class="line">                type=&quot;ANNOTATEDMAPPER&quot;,生成Java Model 和基于注解的Mapper对象</span><br><span class="line">                type=&quot;MIXEDMAPPER&quot;,生成基于注解的Java Model 和相应的Mapper对象</span><br><span class="line">                type=&quot;XMLMAPPER&quot;,生成SQLMap XML文件和独立的Mapper接口</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;javaClientGenerator targetPackage=&quot;com.spring.cms.dao&quot;</span><br><span class="line">                             targetProject=&quot;src/main/java&quot; type=&quot;XMLMAPPER&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;/javaClientGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 必须的（1...N） --&gt;</span><br><span class="line">        &lt;!-- pojo 实体生成器 --&gt;</span><br><span class="line">        &lt;!-- tableName:用于自动生成代码的数据库表；domainObjectName:对应于数据库表的javaBean类名 --&gt;</span><br><span class="line">        &lt;!-- schema即为数据库名 可不写 --&gt;</span><br><span class="line">        &lt;table tableName=&quot;cc_user&quot; domainObjectName=&quot;User&quot;</span><br><span class="line">               enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot;</span><br><span class="line">               enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot;</span><br><span class="line">               selectByExampleQueryId=&quot;false&quot;&gt;</span><br><span class="line">            &lt;!-- 忽略字段 可选的（0 or 1） --&gt;</span><br><span class="line">            &lt;!-- &lt;ignoreColumn column=&quot;is_use&quot; /&gt; --&gt;</span><br><span class="line">            &lt;!--//无论字段是什么类型，生成的类属性都是varchar。 可选的（0 or 1） 测试无效 --&gt;</span><br><span class="line">            &lt;!-- &lt;columnOverride column=&quot;city_code&quot; jdbcType=&quot;VARCHAR&quot; /&gt; --&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 必须的（1...N） --&gt;</span><br><span class="line">        &lt;!-- pojo 实体生成器 --&gt;</span><br><span class="line">        &lt;!-- tableName:用于自动生成代码的数据库表；domainObjectName:对应于数据库表的javaBean类名 --&gt;</span><br><span class="line">        &lt;!-- schema即为数据库名 可不写 --&gt;</span><br><span class="line">        &lt;table tableName=&quot;cc_user_role&quot; domainObjectName=&quot;UserRole&quot;</span><br><span class="line">               enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot;</span><br><span class="line">               enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot;</span><br><span class="line">               selectByExampleQueryId=&quot;false&quot;&gt;</span><br><span class="line">            &lt;!-- 忽略字段 可选的（0 or 1） --&gt;</span><br><span class="line">            &lt;!-- &lt;ignoreColumn column=&quot;is_use&quot; /&gt; --&gt;</span><br><span class="line">            &lt;!--//无论字段是什么类型，生成的类属性都是varchar。 可选的（0 or 1） 测试无效 --&gt;</span><br><span class="line">            &lt;!-- &lt;columnOverride column=&quot;city_code&quot; jdbcType=&quot;VARCHAR&quot; /&gt; --&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 必须的（1...N） --&gt;</span><br><span class="line">        &lt;!-- pojo 实体生成器 --&gt;</span><br><span class="line">        &lt;!-- tableName:用于自动生成代码的数据库表；domainObjectName:对应于数据库表的javaBean类名 --&gt;</span><br><span class="line">        &lt;!-- schema即为数据库名 可不写 --&gt;</span><br><span class="line">        &lt;table tableName=&quot;cc_role&quot; domainObjectName=&quot;Role&quot;</span><br><span class="line">               enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot;</span><br><span class="line">               enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot;</span><br><span class="line">               selectByExampleQueryId=&quot;false&quot;&gt;</span><br><span class="line">            &lt;!-- 忽略字段 可选的（0 or 1） --&gt;</span><br><span class="line">            &lt;!-- &lt;ignoreColumn column=&quot;is_use&quot; /&gt; --&gt;</span><br><span class="line">            &lt;!--//无论字段是什么类型，生成的类属性都是varchar。 可选的（0 or 1） 测试无效 --&gt;</span><br><span class="line">            &lt;!-- &lt;columnOverride column=&quot;city_code&quot; jdbcType=&quot;VARCHAR&quot; /&gt; --&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 必须的（1...N） --&gt;</span><br><span class="line">        &lt;!-- pojo 实体生成器 --&gt;</span><br><span class="line">        &lt;!-- tableName:用于自动生成代码的数据库表；domainObjectName:对应于数据库表的javaBean类名 --&gt;</span><br><span class="line">        &lt;!-- schema即为数据库名 可不写 --&gt;</span><br><span class="line">        &lt;table tableName=&quot;cc_role_resource&quot; domainObjectName=&quot;RoleResource&quot;</span><br><span class="line">               enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot;</span><br><span class="line">               enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot;</span><br><span class="line">               selectByExampleQueryId=&quot;false&quot;&gt;</span><br><span class="line">            &lt;!-- 忽略字段 可选的（0 or 1） --&gt;</span><br><span class="line">            &lt;!-- &lt;ignoreColumn column=&quot;is_use&quot; /&gt; --&gt;</span><br><span class="line">            &lt;!--//无论字段是什么类型，生成的类属性都是varchar。 可选的（0 or 1） 测试无效 --&gt;</span><br><span class="line">            &lt;!-- &lt;columnOverride column=&quot;city_code&quot; jdbcType=&quot;VARCHAR&quot; /&gt; --&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 必须的（1...N） --&gt;</span><br><span class="line">        &lt;!-- pojo 实体生成器 --&gt;</span><br><span class="line">        &lt;!-- tableName:用于自动生成代码的数据库表；domainObjectName:对应于数据库表的javaBean类名 --&gt;</span><br><span class="line">        &lt;!-- schema即为数据库名 可不写 --&gt;</span><br><span class="line">        &lt;table tableName=&quot;cc_resource&quot; domainObjectName=&quot;Resource&quot;</span><br><span class="line">               enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot;</span><br><span class="line">               enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot;</span><br><span class="line">               selectByExampleQueryId=&quot;false&quot;&gt;</span><br><span class="line">            &lt;!-- 忽略字段 可选的（0 or 1） --&gt;</span><br><span class="line">            &lt;!-- &lt;ignoreColumn column=&quot;is_use&quot; /&gt; --&gt;</span><br><span class="line">            &lt;!--//无论字段是什么类型，生成的类属性都是varchar。 可选的（0 or 1） 测试无效 --&gt;</span><br><span class="line">            &lt;!-- &lt;columnOverride column=&quot;city_code&quot; jdbcType=&quot;VARCHAR&quot; /&gt; --&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">    &lt;/context&gt;</span><br><span class="line">&lt;/generatorConfiguration&gt;</span><br></pre></td></tr></table></figure><p>jdbc.properties配置文件的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">validationQuery=SELECT 1</span><br><span class="line">jdbc_url=jdbc:mysql://localhost:3306/contentmanagersystem_db?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull</span><br><span class="line">jdbc_username=root</span><br><span class="line">jdbc_password=sky</span><br><span class="line">jdbc.mysql-master.initialSize=5</span><br><span class="line">jdbc.mysql-master.maxActive=5</span><br><span class="line">jdbc.mysql-master.maxIdle=5</span><br><span class="line">jdbc.mysql-master.minIdle=1</span><br><span class="line">jdbc.mysql-master.maxWait=6000</span><br></pre></td></tr></table></figure><p><strong>3. 在IDEA中利用插件生成代码</strong></p><p>选择IDEA右上角下拉框中的Edit Configurations,然后进入到配置页面，选择做上角的 + 号，如图：</p><p><img src="http://p25wdbssm.bkt.clouddn.com/mybatis2.png" alt=""></p><p>选择maven，然后在Commond line栏填上如图命令</p><p><img src="http://p25wdbssm.bkt.clouddn.com/mabatis3.png" alt=""></p><p>点击应用。最后点击启动按钮，即可自动生成代码。</p><p><img src="http://p25wdbssm.bkt.clouddn.com/mybatis4.png" alt=""></p><p>生成成功！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍下如何在idea中利用Maven工具逆向生成mybatis代码&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 在maven中配置pom.xml文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在pom.xml的&lt;build&gt;&lt;/build&gt;中加入如下插件：&lt;/p&gt;
    
    </summary>
    
      <category term="mybatis" scheme="http://yoursite.com/categories/mybatis/"/>
    
    
      <category term="后端" scheme="http://yoursite.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>容器主要类型的区分</title>
    <link href="http://yoursite.com/2018/01/03/%E5%AE%B9%E5%99%A8%E4%B8%BB%E8%A6%81%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8C%BA%E5%88%86/"/>
    <id>http://yoursite.com/2018/01/03/容器主要类型的区分/</id>
    <published>2018-01-03T12:13:06.000Z</published>
    <updated>2018-01-08T13:00:28.906Z</updated>
    
    <content type="html"><![CDATA[<h3 id="容器的基本概念"><a href="#容器的基本概念" class="headerlink" title="容器的基本概念"></a>容器的基本概念</h3><p>Java 容器类类库的概念是“保存对象”，通常将其划分为两个不同的概念：</p><ol><li>Collection: 一个独立元素的序列，这些元素都服从一条或多条规则。List 必须按照插入的顺序保存元素，而Set不能有重复元素。Queue按照排队规则来确定能够对象产生的顺序（通常与它们被插入的顺序相同）。<a id="more"></a></li><li>Map: 一组成对的“键值对”对象，允许你使用键来查找值。映射表允许我们使用另一个对象来查找某个对象，它也被成为“关联数组”，因为它将某些对象与另外一些对象关联在一起；或者被称为“字典”，因为你可以使用键对象来查找值对象。Map是强大的编程工具。</li></ol><h3 id="容器中的几种不同的存贮方式"><a href="#容器中的几种不同的存贮方式" class="headerlink" title="容器中的几种不同的存贮方式"></a>容器中的几种不同的存贮方式</h3><p>先来看一个小例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public class PrintingContainers &#123;</span><br><span class="line">    public static Collection fill(Collection&lt;String&gt; collection)&#123;</span><br><span class="line">        collection.add(&quot;Snow&quot;);</span><br><span class="line">        collection.add(&quot;White&quot;);</span><br><span class="line">        collection.add(&quot;Star&quot;);</span><br><span class="line">        collection.add(&quot;Wars&quot;);</span><br><span class="line">        return collection;</span><br><span class="line">    &#125;</span><br><span class="line">    public static Map fill(Map&lt;String,String&gt; map)&#123;</span><br><span class="line">        map.put(&quot;Snow&quot;,&quot;Tom&quot;);</span><br><span class="line">        map.put(&quot;White&quot;,&quot;Jerry&quot;);</span><br><span class="line">        map.put(&quot;Star&quot;,&quot;Jack&quot;);</span><br><span class="line">        map.put(&quot;Wars&quot;,&quot;Angle&quot;);</span><br><span class="line">        return map;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        System.out.println(fill(new ArrayList&lt;String&gt;()));</span><br><span class="line">        System.out.println(fill(new LinkedList&lt;String&gt;()));</span><br><span class="line">        System.out.println(fill(new HashSet&lt;String&gt;()));</span><br><span class="line">        System.out.println(fill(new LinkedHashSet&lt;String&gt;()));</span><br><span class="line">        System.out.println(fill(new TreeSet&lt;String&gt;()));</span><br><span class="line">        System.out.println(fill(new HashMap&lt;String,String&gt;()));</span><br><span class="line">        System.out.println(fill(new TreeMap&lt;String,String&gt;()));</span><br><span class="line">        System.out.println(fill(new LinkedHashMap&lt;String,String&gt;()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码运行的结果为：</p><p><img src="http://p25wdbssm.bkt.clouddn.com/blog2.png" alt=""></p><p>以上代码展示了Java容器类库中的两种主要类型，它们的区别在于容器中每个“槽”保存的元素的个数。Collection在每个“槽”中只能存贮一个元素。<br>此类容器包括：List，它已特定的顺序保存一组元素；Set，元素之间不能重复；Queue，只允许在容器的一端插入对象，并从另外一端移除对象。Map在每个槽中存贮了两个对象，即一个键值对。</p><p>上面的代码中首先利用fill()方法给所有类型的Collection容器添加元素add()方法。fill()方法可以作用于所有类型的Collection。</p><p>ArrayList和LinkedList都是List类型，两者都属于可伸缩数组，可以动态的改变数组的长度。从输出的结果可以看出，它们都是按照被插入的顺序来保存元素。两者的不同之处不仅在于执行某些类型的操作时的性能，而且LinkedList包含的操作也多余ArrayList。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;容器的基本概念&quot;&gt;&lt;a href=&quot;#容器的基本概念&quot; class=&quot;headerlink&quot; title=&quot;容器的基本概念&quot;&gt;&lt;/a&gt;容器的基本概念&lt;/h3&gt;&lt;p&gt;Java 容器类类库的概念是“保存对象”，通常将其划分为两个不同的概念：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Collection: 一个独立元素的序列，这些元素都服从一条或多条规则。List 必须按照插入的顺序保存元素，而Set不能有重复元素。Queue按照排队规则来确定能够对象产生的顺序（通常与它们被插入的顺序相同）。
    
    </summary>
    
      <category term="容器" scheme="http://yoursite.com/categories/%E5%AE%B9%E5%99%A8/"/>
    
    
      <category term="后端" scheme="http://yoursite.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>多线程的几种实现方式</title>
    <link href="http://yoursite.com/2018/01/02/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/01/02/多线程的几种实现方式/</id>
    <published>2018-01-02T13:22:11.000Z</published>
    <updated>2018-01-07T12:05:39.565Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是线程？"><a href="#什么是线程？" class="headerlink" title="什么是线程？"></a>什么是线程？</h3><blockquote><p>线程是指程序在执行过程中，能够执行程序程序代码的一个执行单元。在Java语言中，线程有四种状态：运行、就绪、挂起和结束。</p></blockquote><a id="more"></a><h3 id="为什么要使用多线程"><a href="#为什么要使用多线程" class="headerlink" title="为什么要使用多线程"></a>为什么要使用多线程</h3><ul><li>使用多哦线程可以减少程序的相应时间。</li><li>多CPU或多核计算机本身就具有执行多线程的能力。</li><li>与进程相比，线程的创建和切换开销更小。</li><li>使用多线程能简化程序的结构，使程序便于维护和理解。一个非常复杂的进程可以分成多个线程来执行。</li></ul><h3 id="基本的线程机制"><a href="#基本的线程机制" class="headerlink" title="基本的线程机制"></a>基本的线程机制</h3><p>在使用线程时，CPU将轮流给每个任务分配其占用时间。每个任务都觉得自己在一直占用着CPU,但事实上CPU时间是划分成片段分配给所有的任务。线程可以使你从这个层次抽身出来。<br><em>注意：当系统使用时间切片机制时，CPU轮流给每个任务分配时间，例如Windows（线程优先级和时间片轮转调度）操作系统。但有些操作系统采用FIFO模型，除非有高优先级的线程被唤醒，否则当前线程将一直运行，直至阻塞或终止。</em></p><h3 id="如何实现Java多线程"><a href="#如何实现Java多线程" class="headerlink" title="如何实现Java多线程"></a>如何实现Java多线程</h3><h4 id="继承Thread类，重写run-方法"><a href="#继承Thread类，重写run-方法" class="headerlink" title="继承Thread类，重写run()方法"></a>继承Thread类，重写run()方法</h4><p>Thread 本质上也是实现了Runnable接口的一个实例，它代表一个线程的实例，并且，<br>启动线程的唯一方法就是通过Thread类的start()方法。start()方法是一个native(本地)方法，它将启动一个新线程，并执行一个run()方法(Thread中提供的run()方法是一个空方法)。<br>这种方式通过自定义直接继承Thread，并重写run()方法，就可以启动新线程并执行自己定义的run()方法。<br><strong>调用start()方法后并不是立即执行多线程代码，而是使得该线程变成可运行态，什么时候运行多线程是由CPU调度决定的</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class MyThread extends Thread&#123;</span><br><span class="line">     public void run()&#123;</span><br><span class="line">         System.out.println(&quot;Thread body&quot;);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> public class Test&#123;</span><br><span class="line">     public static void main(String[] args)&#123;</span><br><span class="line">         MyThread thread=new MyThread();</span><br><span class="line">         thread.run();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="实现Runnable接口，并实现该接口的run-方法"><a href="#实现Runnable接口，并实现该接口的run-方法" class="headerlink" title="实现Runnable接口，并实现该接口的run()方法"></a>实现Runnable接口，并实现该接口的run()方法</h4><p><strong>主要步骤：</strong><br>1） 自定义类并实现Runnable接口，并实现run()方法。<br>2） 创建Thread对象，用实现Runnable接口的对象作为参数实例化该Thread对象。<br>3） 调用Thread的start()方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class MyThread implements Runnable&#123;</span><br><span class="line">    public void run()&#123;</span><br><span class="line">        System.out.println(&quot;Thread body&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        MyThread thread=new MyThread();</span><br><span class="line">        Thread t=new Thread(thread);</span><br><span class="line">        t.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 以上两种是实现多线程最常用的方法。<br> 其实不管是通过继承Thread类还是通过使用Runnable接口来实现多线程的方法，最终还是通过Thread的对象的API来控制线程的。</p><h4 id="实现Callable接口，重写call-方法"><a href="#实现Callable接口，重写call-方法" class="headerlink" title="实现Callable接口，重写call()方法"></a>实现Callable接口，重写call()方法</h4><p>Callable接口实际上是属于Executor框架的功能类，Callable接口与Runnable接口的功能类类似，但提供了比Runnable更强大的功能，主要表现在以下三点：<br><strong>1）Callable可以在任务结束后提供一个返回值，Runnable无法提供这个功能。</strong><br><strong>2）Callable中的call()方法可以抛出异常，而Runnable的run()方法无法抛出异常。</strong><br><strong>3）运行Callable可以拿到一个Future对象，Future对象表示异步计算的结果，可以使用Future来监视目标线程调用call()方法的情况，当调用Future的get()方法以获取结果时，当前线程就会阻塞，直到call()方法结束返回结果。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class CallableAndFuture&#123;</span><br><span class="line">    //创建线程类</span><br><span class="line">    public static class CallableTest implements Callable&lt;String&gt;&#123;</span><br><span class="line">        @Override</span><br><span class="line">        public String call() throws Exception &#123;</span><br><span class="line">            return &quot;欢迎来到我的博客！&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        ExecutorService threadPool= Executors.newSingleThreadExecutor();</span><br><span class="line">        //启动线程</span><br><span class="line">        Future&lt;String&gt; future=threadPool.submit(new CallableTest());</span><br><span class="line">        try &#123;</span><br><span class="line">            System.out.println(&quot;waiting thread to finish&quot;);</span><br><span class="line">            //等待线程结束，并获取返回结果</span><br><span class="line">            System.out.println(future.get());</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述程序的输出结果为：<br><img src="http://p25wdbssm.bkt.clouddn.com/blog.png" alt=""></p><p>以上3中方式中，前两种方式线程执行完后都没有返回值，只有最后一种带有返回值的，但是当需要使用多线程时，一般最好是使用实现Runnable接口的方式。<br>因为Thread类定义的多中方法可以被派生类使用或者重写。但是只有run()方法是必须被重写的，在run()方法中实现了这个线程的主要功能。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是线程？&quot;&gt;&lt;a href=&quot;#什么是线程？&quot; class=&quot;headerlink&quot; title=&quot;什么是线程？&quot;&gt;&lt;/a&gt;什么是线程？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;线程是指程序在执行过程中，能够执行程序程序代码的一个执行单元。在Java语言中，线程有四种状态：运行、就绪、挂起和结束。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="线程" scheme="http://yoursite.com/categories/%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="后端" scheme="http://yoursite.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Git总结</title>
    <link href="http://yoursite.com/2018/01/01/git/"/>
    <id>http://yoursite.com/2018/01/01/git/</id>
    <published>2018-01-01T11:31:24.000Z</published>
    <updated>2018-01-08T11:35:21.159Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git-简介"><a href="#git-简介" class="headerlink" title="git 简介"></a>git 简介</h2><p><a href="https://baike.baidu.com/item/GIT/12647237?fr=aladdin" target="_blank" rel="noopener">git</a> 是一款分布式的版本控制系统，其核心是分支，分支的意义在于可以将项目代码按照功能和模块拆分为不同的分支。<br>在 git 中，工作目录下面的所有文件都不外乎两种状态： <strong>已跟踪</strong>和<strong>未跟踪</strong>。</p><a id="more"></a><p>已跟踪文件是指已经被纳入git中，在版本控制器中有它们的记录，但是当我们对文件进行修改之后，文件变得和git中的不一样，那么它就属于未跟踪文件。初次克隆某个仓库时，所有文件都属于已跟踪文件。</p><h2 id="git-常用指令"><a href="#git-常用指令" class="headerlink" title="git 常用指令"></a>git 常用指令</h2><h3 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a><font color="#ff0000">git pull</font></h3><p>作用</p><blockquote><p>将远程代码仓库里的代码下载下来并自动整合到当前工作分支</p></blockquote><p>用法： <strong>git pull origin master</strong></p><p>将origin这个版本库中的代码更新到本地的master主支，类似于SVN的<font color="#99ff00">update</font></p><h3 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a><font color="#ff0000">git add</font></h3><p>作用</p><blockquote><p>是将当前更改或者新增的文件加入到Git的索引中，加入到Git的索引中就表示记入了版本历史中，这也是提交之前所需要执行的一步</p></blockquote><p>用法： <strong>git add app/model/user.java</strong></p><p>增加app/model/user.java文件到Git的索引中,该功能类似于SVN的<font color="#99ff00">add</font></p><h3 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a><font color="#ff0000">git rm</font></h3><p>作用</p><blockquote><p>从当前的工作空间中和索引中删除文件</p></blockquote><p>用法： <strong>git rm app/model/user.java</strong></p><p>删除工作空间中或者索引中的app/model/user.java文件，该功能类似于SVN的<font color="#99ff00">rm、del</font></p><h3 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a><font color="#ff0000">git commit</font></h3><p>作用</p><blockquote><p>将所有添加到索引库的文件添加到本地仓库<br>文件一旦commit之后，就会在git中形成一个历史版本，以后无论怎么变都能够找到此次提交的记录。</p></blockquote><p>用法： <strong>git commit -m story #3, add user model</strong> </p><p>提交的时候必须用-m来输入一条提交信息，该功能类似于SVN中的<font color="#99ff00">commit</font></p><h3 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a><font color="#ff0000">git push</font></h3><p>作用</p><blockquote><p>将本地仓库中的修改推送到远程仓库</p></blockquote><p>用法：<strong>git push origin</strong></p><p>将本地的代码推送到名为origin的远程版本库中</p><h3 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a><font color="#ff0000">git log</font></h3><p>作用</p><blockquote><p>查看git的历史日志</p></blockquote><p>该功能类似于SVN的<font color="#99ff00">log</font></p><h3 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a><font color="#ff0000">git revert</font></h3><p>作用</p><blockquote><p>还原一个版本的修改，必须提供一个具体的Git版本号，Git的版本号都是生成的一个哈希值</p></blockquote><p>用法：<strong>git revert bbaf6fb5060b4875b18ff9ff637ce118256d6f20</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;git-简介&quot;&gt;&lt;a href=&quot;#git-简介&quot; class=&quot;headerlink&quot; title=&quot;git 简介&quot;&gt;&lt;/a&gt;git 简介&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://baike.baidu.com/item/GIT/12647237?fr=aladdin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;git&lt;/a&gt; 是一款分布式的版本控制系统，其核心是分支，分支的意义在于可以将项目代码按照功能和模块拆分为不同的分支。&lt;br&gt;在 git 中，工作目录下面的所有文件都不外乎两种状态： &lt;strong&gt;已跟踪&lt;/strong&gt;和&lt;strong&gt;未跟踪&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="环境" scheme="http://yoursite.com/categories/%E7%8E%AF%E5%A2%83/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/12/30/hello-world/"/>
    <id>http://yoursite.com/2017/12/30/hello-world/</id>
    <published>2017-12-30T09:51:33.000Z</published>
    <updated>2018-01-07T12:16:02.397Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
