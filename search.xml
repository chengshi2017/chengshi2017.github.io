<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[spring boot 配置热部署]]></title>
    <url>%2F2018%2F03%2F28%2Fspring%20boot%E9%85%8D%E7%BD%AE%E7%83%AD%E9%83%A8%E7%BD%B2%2F</url>
    <content type="text"><![CDATA[什么是热部署？热部署，就是在应用正在运行的时候升级软件，却不需要重新启动应用。在开发过程中，热部署对我们的开发速度有很大的帮助。例如在我们修改Bug的时候对Jsp或者Java类进行了修改在不重新启动WEB服务器就能让修改生效,配置文件除外。 怎么样进行热部署如何在idea中设置Tomcat热部署1.首先打开idea，点击右上角的下拉框，选中Edit Configurations,如下图： 2.点击对话框左上角的加号，选择Tomcat Server，再选择Local子菜单 3.选择Deployment选项卡，对需要部署的项目文件做设置，点击加号选择Artifact，然后选择war exploded方式，这种方式是以文件夹方式部署的，而war是以war包的方式，exploded方式支持热部署，注意一定要选择exploded方式，否则无法实现热部署。 4.然后回到Server选项卡，设置On Update action和On frame detectivation选项，都设置为Update classes and resources，表示classes文件和资源文件都更新 5.如果只设置On Update action选项，则需要每次自己手动点击更新，设置了On frame detectivation，会监测窗口，idea窗口发生切换则自动更新文件在运行模式下，Java文件更新不会立即生效，可以选择debug模式运行。 spring boot热部署配置spring boot致力于快速应用开发领域，内置了很多的组件，让我们摆脱了spring MVC下冗余的配置，使我们的开发变得更加的便捷快速。spring boot在自动嵌入了Tomcat，无需部署war文件，便可使项目快速运行起来，因此spring boot的热部署也与Tomcat的热部署不一样。spring boot的热部署是使用devtools模块。devtools模块，是为开发者服务的一个模块。主要的功能就是代码修改后一般在5秒之内就会自动重新加载至服务器，相当于restart成功。 原理分析 在发现代码有更改之后，自动重新启动应用，但是其速度比手动停止后再启动还要快些，更快这里指的不是节省出来的手工操作的时间。 一个Base ClassLoader加载器，用于加载不会改变的第三方依赖的jar； 另一个Restart ClassLoader加载器，用于加载自己编写的类； 执行流程：当应用重启后，原先的Restart ClassLoader被丢掉、重新new一个Restart ClassLoader来加载这些修改过的东西，而Base ClassLoader却没有变化。这就是devtools重启速度快的原因。 如何实现热部署 1.修改项目的pom.xml文件在依赖中加入:123456&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;version&gt;1.5.7.RELEASE&lt;/version&gt; &lt;optional&gt;true&lt;/optional&gt;&lt;/dependency&gt; 在构建中加入:12345678&lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;fork&gt;true&lt;/fork&gt; &lt;addResources&gt;true&lt;/addResources&gt; &lt;/configuration&gt;&lt;/plugin&gt; 2.修改设置在idea中，还需要到设置里将project automatically勾选上；File-&gt;Setting，然后搜索“compiler” 将右侧project automatically勾上。 3.修改IDE配置使用ctrl+shift+a 快捷键搜索Registry，选择选择搜索出来的第一个，进入后找到“compiler.automake.allow.when.app.running”，勾上开启此功能即可。 4.应用热部署重新启动项目即可实现热部署，改动任意代码会立即生效，不用再每次重新启动项目]]></content>
      <categories>
        <category>spring boot</category>
      </categories>
      <tags>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[spring boot的配置文件application.properties详解]]></title>
    <url>%2F2018%2F03%2F28%2Fspring%20boot%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6application.properties%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370# =================================================================== # COMMON SPRING BOOT PROPERTIES # # This sample file is provided as a guideline. Do NOT copy it in its # entirety to your own application. ^^^ # =================================================================== # ---------------------------------------- # CORE PROPERTIES # ---------------------------------------- # SPRING CONFIG (ConfigFileApplicationListener) spring.config.name= # config file name (default to &apos;application&apos;) spring.config.location= # location of config file # PROFILES spring.profiles= # comma list of active profiles # APPLICATION SETTINGS (SpringApplication) spring.main.sources= spring.main.web-environment= # detect by default spring.main.show-banner=true spring.main....= # see class for all properties # LOGGING logging.path=/var/logs logging.file=myapp.log logging.config= # IDENTITY (ContextIdApplicationContextInitializer) spring.application.name= spring.application.index= # EMBEDDED SERVER CONFIGURATION (ServerProperties) server.port=8080 server.address= # bind to a specific NIC server.session-timeout= # session timeout in seconds server.context-path= # the context path, defaults to &apos;/&apos; server.servlet-path= # the servlet path, defaults to &apos;/&apos; server.tomcat.access-log-pattern= # log pattern of the access log server.tomcat.access-log-enabled=false # is access logging enabled server.tomcat.protocol-header=x-forwarded-proto # ssl forward headers server.tomcat.remote-ip-header=x-forwarded-for server.tomcat.basedir=/tmp # base dir (usually not needed, defaults to tmp) server.tomcat.background-processor-delay=30; # in seconds server.tomcat.max-threads = 0 # number of threads in protocol handler server.tomcat.uri-encoding = UTF-8 # character encoding to use for URL decoding # SPRING MVC (HttpMapperProperties) http.mappers.json-pretty-print=false # pretty print JSON http.mappers.json-sort-keys=false # sort keys spring.mvc.locale= # set fixed locale, e.g. en_UK spring.mvc.date-format= # set fixed date format, e.g. dd/MM/yyyy spring.mvc.message-codes-resolver-format= # PREFIX_ERROR_CODE / POSTFIX_ERROR_CODE spring.view.prefix= # MVC view prefix spring.view.suffix= # ... and suffix spring.resources.cache-period= # cache timeouts in headers sent to browser spring.resources.add-mappings=true # if default mappings should be added # THYMELEAF (ThymeleafAutoConfiguration) spring.thymeleaf.prefix=classpath:/templates/ spring.thymeleaf.suffix=.html spring.thymeleaf.mode=HTML5 spring.thymeleaf.encoding=UTF-8 spring.thymeleaf.content-type=text/html # ;charset=&lt;encoding&gt; is added spring.thymeleaf.cache=true # set to false for hot refresh # FREEMARKER (FreeMarkerAutoConfiguration) spring.freemarker.allowRequestOverride=false spring.freemarker.allowSessionOverride=false spring.freemarker.cache=true spring.freemarker.checkTemplateLocation=true spring.freemarker.contentType=text/html spring.freemarker.exposeRequestAttributes=false spring.freemarker.exposeSessionAttributes=false spring.freemarker.exposeSpringMacroHelpers=false spring.freemarker.prefix= spring.freemarker.requestContextAttribute= spring.freemarker.settings.*= spring.freemarker.suffix=.ftl spring.freemarker.templateEncoding=UTF-8 spring.freemarker.templateLoaderPath=classpath:/templates/ spring.freemarker.viewNames= # whitelist of view names that can be resolved # GROOVY TEMPLATES (GroovyTemplateAutoConfiguration) spring.groovy.template.allowRequestOverride=false spring.groovy.template.allowSessionOverride=false spring.groovy.template.cache=true spring.groovy.template.configuration.*= # See Groovy&apos;s TemplateConfiguration spring.groovy.template.contentType=text/html spring.groovy.template.prefix=classpath:/templates/ spring.groovy.template.suffix=.tpl spring.groovy.template.templateEncoding=UTF-8 spring.groovy.template.viewNames= # whitelist of view names that can be resolved # VELOCITY TEMPLATES (VelocityAutoConfiguration) spring.velocity.allowRequestOverride=false spring.velocity.allowSessionOverride=false spring.velocity.cache=true spring.velocity.checkTemplateLocation=true spring.velocity.contentType=text/html spring.velocity.dateToolAttribute= spring.velocity.exposeRequestAttributes=false spring.velocity.exposeSessionAttributes=false spring.velocity.exposeSpringMacroHelpers=false spring.velocity.numberToolAttribute= spring.velocity.prefix= spring.velocity.properties.*= spring.velocity.requestContextAttribute= spring.velocity.resourceLoaderPath=classpath:/templates/ spring.velocity.suffix=.vm spring.velocity.templateEncoding=UTF-8 spring.velocity.viewNames= # whitelist of view names that can be resolved # INTERNATIONALIZATION (MessageSourceAutoConfiguration) spring.messages.basename=messages spring.messages.cacheSeconds=-1 spring.messages.encoding=UTF-8 # SECURITY (SecurityProperties) security.user.name=user # login username security.user.password= # login password security.user.role=USER # role assigned to the user security.require-ssl=false # advanced settings ... security.enable-csrf=false security.basic.enabled=true security.basic.realm=Spring security.basic.path= # /** security.headers.xss=false security.headers.cache=false security.headers.frame=false security.headers.contentType=false security.headers.hsts=all # none / domain / all security.sessions=stateless # always / never / if_required / stateless security.ignored=false # DATASOURCE (DataSourceAutoConfiguration &amp; DataSourceProperties) spring.datasource.name= # name of the data source spring.datasource.initialize=true # populate using data.sql spring.datasource.schema= # a schema (DDL) script resource reference spring.datasource.data= # a data (DML) script resource reference spring.datasource.platform= # the platform to use in the schema resource (schema-$&#123;platform&#125;.sql) spring.datasource.continueOnError=false # continue even if can&apos;t be initialized spring.datasource.separator=; # statement separator in SQL initialization scripts spring.datasource.driverClassName= # JDBC Settings... spring.datasource.url= spring.datasource.username= spring.datasource.password= spring.datasource.max-active=100 # Advanced configuration... spring.datasource.max-idle=8 spring.datasource.min-idle=8 spring.datasource.initial-size=10 spring.datasource.validation-query= spring.datasource.test-on-borrow=false spring.datasource.test-on-return=false spring.datasource.test-while-idle= spring.datasource.time-between-eviction-runs-millis= spring.datasource.min-evictable-idle-time-millis= spring.datasource.max-wait-millis= # MONGODB (MongoProperties) spring.data.mongodb.host= # the db host spring.data.mongodb.port=27017 # the connection port (defaults to 27107) spring.data.mongodb.uri=mongodb://localhost/test # connection URL spring.data.mongo.repositories.enabled=true # if spring data repository support is enabled # JPA (JpaBaseConfiguration, HibernateJpaAutoConfiguration) spring.jpa.properties.*= # properties to set on the JPA connection spring.jpa.openInView=true spring.jpa.show-sql=true spring.jpa.database-platform= spring.jpa.database= spring.jpa.generate-ddl=false # ignored by Hibernate, might be useful for other vendors spring.jpa.hibernate.naming-strategy= # naming classname spring.jpa.hibernate.ddl-auto= # defaults to create-drop for embedded dbs spring.data.jpa.repositories.enabled=true # if spring data repository support is enabled # SOLR (SolrProperties&#125;) spring.data.solr.host=http://127.0.0.1:8983/solr spring.data.solr.zkHost= spring.data.solr.repositories.enabled=true # if spring data repository support is enabled # ELASTICSEARCH (ElasticsearchProperties&#125;) spring.data.elasticsearch.cluster-name= # The cluster name (defaults to elasticsearch) spring.data.elasticsearch.cluster-nodes= # The address(es) of the server node (comma-separated; if not specified starts a client node) spring.data.elasticsearch.local=true # if local mode should be used with client nodes spring.data.elasticsearch.repositories.enabled=true # if spring data repository support is enabled # FLYWAY (FlywayProperties) flyway.locations=classpath:db/migrations # locations of migrations scripts flyway.schemas= # schemas to update flyway.initVersion= 1 # version to start migration flyway.prefix=V flyway.suffix=.sql flyway.enabled=true flyway.url= # JDBC url if you want Flyway to create its own DataSource flyway.user= # JDBC username if you want Flyway to create its own DataSource flyway.password= # JDBC password if you want Flyway to create its own DataSource # LIQUIBASE (LiquibaseProperties) liquibase.change-log=classpath:/db/changelog/db.changelog-master.yaml liquibase.contexts= # runtime contexts to use liquibase.default-schema= # default database schema to use liquibase.drop-first=false liquibase.enabled=true # JMX spring.jmx.enabled=true # Expose MBeans from Spring # RABBIT (RabbitProperties) spring.rabbitmq.host= # connection host spring.rabbitmq.port= # connection port spring.rabbitmq.addresses= # connection addresses (e.g. myhost:9999,otherhost:1111) spring.rabbitmq.username= # login user spring.rabbitmq.password= # login password spring.rabbitmq.virtualhost= spring.rabbitmq.dynamic= # REDIS (RedisProperties) spring.redis.host=localhost # server host spring.redis.password= # server password spring.redis.port=6379 # connection port spring.redis.pool.max-idle=8 # pool settings ... spring.redis.pool.min-idle=0 spring.redis.pool.max-active=8 spring.redis.pool.max-wait=-1 # ACTIVEMQ (ActiveMQProperties) spring.activemq.broker-url=tcp://localhost:61616 # connection URL spring.activemq.user= spring.activemq.password= spring.activemq.in-memory=true # broker kind to create if no broker-url is specified spring.activemq.pooled=false # HornetQ (HornetQProperties) spring.hornetq.mode= # connection mode (native, embedded) spring.hornetq.host=localhost # hornetQ host (native mode) spring.hornetq.port=5445 # hornetQ port (native mode) spring.hornetq.embedded.enabled=true # if the embedded server is enabled (needs hornetq-jms-server.jar) spring.hornetq.embedded.serverId= # auto-generated id of the embedded server (integer) spring.hornetq.embedded.persistent=false # message persistence spring.hornetq.embedded.data-directory= # location of data content (when persistence is enabled) spring.hornetq.embedded.queues= # comma separate queues to create on startup spring.hornetq.embedded.topics= # comma separate topics to create on startup spring.hornetq.embedded.cluster-password= # customer password (randomly generated by default) # JMS (JmsProperties) spring.jms.pub-sub-domain= # false for queue (default), true for topic # SPRING BATCH (BatchDatabaseInitializer) spring.batch.job.names=job1,job2 spring.batch.job.enabled=true spring.batch.initializer.enabled=true spring.batch.schema= # batch schema to load # AOP spring.aop.auto= spring.aop.proxy-target-class= # FILE ENCODING (FileEncodingApplicationListener) spring.mandatory-file-encoding=false # SPRING SOCIAL (SocialWebAutoConfiguration) spring.social.auto-connection-views=true # Set to true for default connection views or false if you provide your own # SPRING SOCIAL FACEBOOK (FacebookAutoConfiguration) spring.social.facebook.app-id= # your application&apos;s Facebook App ID spring.social.facebook.app-secret= # your application&apos;s Facebook App Secret # SPRING SOCIAL LINKEDIN (LinkedInAutoConfiguration) spring.social.linkedin.app-id= # your application&apos;s LinkedIn App ID spring.social.linkedin.app-secret= # your application&apos;s LinkedIn App Secret # SPRING SOCIAL TWITTER (TwitterAutoConfiguration) spring.social.twitter.app-id= # your application&apos;s Twitter App ID spring.social.twitter.app-secret= # your application&apos;s Twitter App Secret # SPRING MOBILE SITE PREFERENCE (SitePreferenceAutoConfiguration) spring.mobile.sitepreference.enabled=true # enabled by default # SPRING MOBILE DEVICE VIEWS (DeviceDelegatingViewResolverAutoConfiguration) spring.mobile.devicedelegatingviewresolver.enabled=true # disabled by default spring.mobile.devicedelegatingviewresolver.normalPrefix= spring.mobile.devicedelegatingviewresolver.normalSuffix= spring.mobile.devicedelegatingviewresolver.mobilePrefix=mobile/ spring.mobile.devicedelegatingviewresolver.mobileSuffix= spring.mobile.devicedelegatingviewresolver.tabletPrefix=tablet/ spring.mobile.devicedelegatingviewresolver.tabletSuffix= # ---------------------------------------- # ACTUATOR PROPERTIES # ---------------------------------------- # MANAGEMENT HTTP SERVER (ManagementServerProperties) management.port= # defaults to &apos;server.port&apos; management.address= # bind to a specific NIC management.contextPath= # default to &apos;/&apos; # ENDPOINTS (AbstractEndpoint subclasses) endpoints.autoconfig.id=autoconfig endpoints.autoconfig.sensitive=true endpoints.autoconfig.enabled=true endpoints.beans.id=beans endpoints.beans.sensitive=true endpoints.beans.enabled=true endpoints.configprops.id=configprops endpoints.configprops.sensitive=true endpoints.configprops.enabled=true endpoints.configprops.keys-to-sanitize=password,secret endpoints.dump.id=dump endpoints.dump.sensitive=true endpoints.dump.enabled=true endpoints.env.id=env endpoints.env.sensitive=true endpoints.env.enabled=true endpoints.health.id=health endpoints.health.sensitive=false endpoints.health.enabled=true endpoints.info.id=info endpoints.info.sensitive=false endpoints.info.enabled=true endpoints.metrics.id=metrics endpoints.metrics.sensitive=true endpoints.metrics.enabled=true endpoints.shutdown.id=shutdown endpoints.shutdown.sensitive=true endpoints.shutdown.enabled=false endpoints.trace.id=trace endpoints.trace.sensitive=true endpoints.trace.enabled=true # MVC ONLY ENDPOINTS endpoints.jolokia.path=jolokia endpoints.jolokia.sensitive=true endpoints.jolokia.enabled=true # when using Jolokia endpoints.error.path=/error # JMX ENDPOINT (EndpointMBeanExportProperties) endpoints.jmx.enabled=true endpoints.jmx.domain= # the JMX domain, defaults to &apos;org.springboot&apos; endpoints.jmx.unique-names=false endpoints.jmx.enabled=true endpoints.jmx.staticNames= # JOLOKIA (JolokiaProperties) jolokia.config.*= # See Jolokia manual # REMOTE SHELL shell.auth=simple # jaas, key, simple, spring shell.command-refresh-interval=-1 shell.command-path-pattern= # classpath*:/commands/**, classpath*:/crash/commands/** shell.config-path-patterns= # classpath*:/crash/* shell.disabled-plugins=false # don&apos;t expose plugins shell.ssh.enabled= # ssh settings ... shell.ssh.keyPath= shell.ssh.port= shell.telnet.enabled= # telnet settings ... shell.telnet.port= shell.auth.jaas.domain= # authentication settings ... shell.auth.key.path= shell.auth.simple.user.name= shell.auth.simple.user.password= shell.auth.spring.roles= # GIT INFO spring.git.properties= # resource ref to generated git info properties file]]></content>
      <categories>
        <category>spring boot</category>
      </categories>
      <tags>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IDEA中使用mybatis generator逆向工程生成代码]]></title>
    <url>%2F2018%2F03%2F28%2FIDEA%E4%B8%AD%E4%BD%BF%E7%94%A8mybatis%20generator%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%2F</url>
    <content type="text"><![CDATA[本文介绍下如何在idea中利用Maven工具逆向生成mybatis代码 1. 在maven中配置pom.xml文件 在pom.xml的中加入如下插件： 12345678910&lt;!--mybatis 逆向工程--&gt;&lt;plugin&gt; &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt; &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.3.2&lt;/version&gt; &lt;configuration&gt; &lt;verbose&gt;true&lt;/verbose&gt; &lt;overwrite&gt;true&lt;/overwrite&gt; &lt;/configuration&gt;&lt;/plugin&gt; 配置好maven插件后，进行下一步。 2. 添加逆向工程的配置文件 在resources目录下新建一个generatorConfig.xml文件，然后将如下配置文件拷贝到上面建的文件中。maven的项目配置文件存放位置如下： generatorConfig.xml文件： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE generatorConfiguration PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;&lt;generatorConfiguration&gt; &lt;!--classPathEntry:数据库的JDBC驱动 --&gt; &lt;classPathEntry location=&quot;F:\.m2\repository\mysql\mysql-connector-java\5.1.34\mysql-connector-java-5.1.34.jar&quot; /&gt; &lt;!--&amp;lt;!&amp;ndash;导入属性配置&amp;ndash;&amp;gt;--&gt; &lt;!--&lt;properties resource=&quot;jdbc.properties&quot;&gt;&lt;/properties&gt;--&gt; &lt;context id=&quot;default&quot; targetRuntime=&quot;MyBatis3&quot;&gt; &lt;!-- optional，旨在创建class时，对注释进行控制 --&gt; &lt;commentGenerator&gt; &lt;property name=&quot;suppressDate&quot; value=&quot;true&quot;/&gt; &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot;/&gt; &lt;/commentGenerator&gt; &lt;!--jdbc的数据库连接 --&gt; &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot; connectionURL=&quot;jdbc:mysql://localhost:3306/cms&quot; userId=&quot;root&quot; password=&quot;sky&quot;&gt; &lt;/jdbcConnection&gt; &lt;!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制--&gt; &lt;javaTypeResolver&gt; &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot;/&gt; &lt;/javaTypeResolver&gt; &lt;!-- Model模型生成器,用来生成含有主键key的类，记录类 以及查询Example类 targetPackage 指定生成的model生成所在的包名 targetProject 指定在该项目下所在的路径 --&gt; &lt;javaModelGenerator targetPackage=&quot;com.spring.cms.model.vo&quot; targetProject=&quot;src/main/java&quot;&gt; &lt;!-- 是否允许子包，即targetPackage.schemaName.tableName --&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot;/&gt; &lt;!-- 是否对model添加 构造函数 --&gt; &lt;property name=&quot;constructorBased&quot; value=&quot;true&quot;/&gt; &lt;!-- 是否对类CHAR类型的列的数据进行trim操作 --&gt; &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot;/&gt; &lt;!-- 建立的Model对象是否 不可改变 即生成的Model对象不会有 setter方法，只有构造方法 --&gt; &lt;property name=&quot;immutable&quot; value=&quot;false&quot;/&gt; &lt;/javaModelGenerator&gt; &lt;!--Mapper映射文件生成所在的目录 为每一个数据库的表生成对应的SqlMap文件 --&gt; &lt;sqlMapGenerator targetPackage=&quot;mapper&quot; targetProject=&quot;src/main/resources&quot;&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot;/&gt; &lt;/sqlMapGenerator&gt; &lt;!-- 客户端代码，生成易于使用的针对Model对象和XML配置文件 的代码 type=&quot;ANNOTATEDMAPPER&quot;,生成Java Model 和基于注解的Mapper对象 type=&quot;MIXEDMAPPER&quot;,生成基于注解的Java Model 和相应的Mapper对象 type=&quot;XMLMAPPER&quot;,生成SQLMap XML文件和独立的Mapper接口 --&gt; &lt;javaClientGenerator targetPackage=&quot;com.spring.cms.dao&quot; targetProject=&quot;src/main/java&quot; type=&quot;XMLMAPPER&quot;&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt; &lt;/javaClientGenerator&gt; &lt;!-- 必须的（1...N） --&gt; &lt;!-- pojo 实体生成器 --&gt; &lt;!-- tableName:用于自动生成代码的数据库表；domainObjectName:对应于数据库表的javaBean类名 --&gt; &lt;!-- schema即为数据库名 可不写 --&gt; &lt;table tableName=&quot;cc_user&quot; domainObjectName=&quot;User&quot; enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot; selectByExampleQueryId=&quot;false&quot;&gt; &lt;!-- 忽略字段 可选的（0 or 1） --&gt; &lt;!-- &lt;ignoreColumn column=&quot;is_use&quot; /&gt; --&gt; &lt;!--//无论字段是什么类型，生成的类属性都是varchar。 可选的（0 or 1） 测试无效 --&gt; &lt;!-- &lt;columnOverride column=&quot;city_code&quot; jdbcType=&quot;VARCHAR&quot; /&gt; --&gt; &lt;/table&gt; &lt;!-- 必须的（1...N） --&gt; &lt;!-- pojo 实体生成器 --&gt; &lt;!-- tableName:用于自动生成代码的数据库表；domainObjectName:对应于数据库表的javaBean类名 --&gt; &lt;!-- schema即为数据库名 可不写 --&gt; &lt;table tableName=&quot;cc_user_role&quot; domainObjectName=&quot;UserRole&quot; enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot; selectByExampleQueryId=&quot;false&quot;&gt; &lt;!-- 忽略字段 可选的（0 or 1） --&gt; &lt;!-- &lt;ignoreColumn column=&quot;is_use&quot; /&gt; --&gt; &lt;!--//无论字段是什么类型，生成的类属性都是varchar。 可选的（0 or 1） 测试无效 --&gt; &lt;!-- &lt;columnOverride column=&quot;city_code&quot; jdbcType=&quot;VARCHAR&quot; /&gt; --&gt; &lt;/table&gt; &lt;!-- 必须的（1...N） --&gt; &lt;!-- pojo 实体生成器 --&gt; &lt;!-- tableName:用于自动生成代码的数据库表；domainObjectName:对应于数据库表的javaBean类名 --&gt; &lt;!-- schema即为数据库名 可不写 --&gt; &lt;table tableName=&quot;cc_role&quot; domainObjectName=&quot;Role&quot; enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot; selectByExampleQueryId=&quot;false&quot;&gt; &lt;!-- 忽略字段 可选的（0 or 1） --&gt; &lt;!-- &lt;ignoreColumn column=&quot;is_use&quot; /&gt; --&gt; &lt;!--//无论字段是什么类型，生成的类属性都是varchar。 可选的（0 or 1） 测试无效 --&gt; &lt;!-- &lt;columnOverride column=&quot;city_code&quot; jdbcType=&quot;VARCHAR&quot; /&gt; --&gt; &lt;/table&gt; &lt;!-- 必须的（1...N） --&gt; &lt;!-- pojo 实体生成器 --&gt; &lt;!-- tableName:用于自动生成代码的数据库表；domainObjectName:对应于数据库表的javaBean类名 --&gt; &lt;!-- schema即为数据库名 可不写 --&gt; &lt;table tableName=&quot;cc_role_resource&quot; domainObjectName=&quot;RoleResource&quot; enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot; selectByExampleQueryId=&quot;false&quot;&gt; &lt;!-- 忽略字段 可选的（0 or 1） --&gt; &lt;!-- &lt;ignoreColumn column=&quot;is_use&quot; /&gt; --&gt; &lt;!--//无论字段是什么类型，生成的类属性都是varchar。 可选的（0 or 1） 测试无效 --&gt; &lt;!-- &lt;columnOverride column=&quot;city_code&quot; jdbcType=&quot;VARCHAR&quot; /&gt; --&gt; &lt;/table&gt; &lt;!-- 必须的（1...N） --&gt; &lt;!-- pojo 实体生成器 --&gt; &lt;!-- tableName:用于自动生成代码的数据库表；domainObjectName:对应于数据库表的javaBean类名 --&gt; &lt;!-- schema即为数据库名 可不写 --&gt; &lt;table tableName=&quot;cc_resource&quot; domainObjectName=&quot;Resource&quot; enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot; selectByExampleQueryId=&quot;false&quot;&gt; &lt;!-- 忽略字段 可选的（0 or 1） --&gt; &lt;!-- &lt;ignoreColumn column=&quot;is_use&quot; /&gt; --&gt; &lt;!--//无论字段是什么类型，生成的类属性都是varchar。 可选的（0 or 1） 测试无效 --&gt; &lt;!-- &lt;columnOverride column=&quot;city_code&quot; jdbcType=&quot;VARCHAR&quot; /&gt; --&gt; &lt;/table&gt; &lt;/context&gt;&lt;/generatorConfiguration&gt; jdbc.properties配置文件的代码如下： 12345678910driverClassName=com.mysql.jdbc.DrivervalidationQuery=SELECT 1jdbc_url=jdbc:mysql://localhost:3306/contentmanagersystem_db?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNulljdbc_username=rootjdbc_password=skyjdbc.mysql-master.initialSize=5jdbc.mysql-master.maxActive=5jdbc.mysql-master.maxIdle=5jdbc.mysql-master.minIdle=1jdbc.mysql-master.maxWait=6000 3. 在IDEA中利用插件生成代码 选择IDEA右上角下拉框中的Edit Configurations,然后进入到配置页面，选择做上角的 + 号，如图： 选择maven，然后在Commond line栏填上如图命令 点击应用。最后点击启动按钮，即可自动生成代码。 生成成功！]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ArrryList和LinkedList的区别]]></title>
    <url>%2F2018%2F01%2F06%2FArrayList%E5%92%8CLinkedList%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[相同点：ArrayList和LinkedList类都位于java.util包中，均为可收缩数组，即可以动态的改变数组的长度。]]></content>
      <categories>
        <category>容器</category>
      </categories>
      <tags>
        <tag>容器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[容器主要类型的区分]]></title>
    <url>%2F2018%2F01%2F03%2F%E5%AE%B9%E5%99%A8%E4%B8%BB%E8%A6%81%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8C%BA%E5%88%86%2F</url>
    <content type="text"><![CDATA[容器的基本概念Java 容器类类库的概念是“保存对象”，通常将其划分为两个不同的概念： Collection: 一个独立元素的序列，这些元素都服从一条或多条规则。List 必须按照插入的顺序保存元素，而Set不能有重复元素。Queue按照排队规则来确定能够对象产生的顺序（通常与它们被插入的顺序相同）。 Map: 一组成对的“键值对”对象，允许你使用键来查找值。映射表允许我们使用另一个对象来查找某个对象，它也被成为“关联数组”，因为它将某些对象与另外一些对象关联在一起；或者被称为“字典”，因为你可以使用键对象来查找值对象。Map是强大的编程工具。 容器中的几种不同的存贮方式先来看一个小例子： 1234567891011121314151617181920212223242526public class PrintingContainers &#123; public static Collection fill(Collection&lt;String&gt; collection)&#123; collection.add(&quot;Snow&quot;); collection.add(&quot;White&quot;); collection.add(&quot;Star&quot;); collection.add(&quot;Wars&quot;); return collection; &#125; public static Map fill(Map&lt;String,String&gt; map)&#123; map.put(&quot;Snow&quot;,&quot;Tom&quot;); map.put(&quot;White&quot;,&quot;Jerry&quot;); map.put(&quot;Star&quot;,&quot;Jack&quot;); map.put(&quot;Wars&quot;,&quot;Angle&quot;); return map; &#125; public static void main(String[] args)&#123; System.out.println(fill(new ArrayList&lt;String&gt;())); System.out.println(fill(new LinkedList&lt;String&gt;())); System.out.println(fill(new HashSet&lt;String&gt;())); System.out.println(fill(new LinkedHashSet&lt;String&gt;())); System.out.println(fill(new TreeSet&lt;String&gt;())); System.out.println(fill(new HashMap&lt;String,String&gt;())); System.out.println(fill(new TreeMap&lt;String,String&gt;())); System.out.println(fill(new LinkedHashMap&lt;String,String&gt;())); &#125;&#125; 代码运行的结果为： 以上代码展示了Java容器类库中的两种主要类型，它们的区别在于容器中每个“槽”保存的元素的个数。Collection在每个“槽”中只能存贮一个元素。此类容器包括：List，它已特定的顺序保存一组元素；Set，元素之间不能重复；Queue，只允许在容器的一端插入对象，并从另外一端移除对象。Map在每个槽中存贮了两个对象，即一个键值对。 上面的代码中首先利用fill()方法给所有类型的Collection容器添加元素add()方法。fill()方法可以作用于所有类型的Collection。 ArrayList和LinkedList都是List类型，两者都属于可伸缩数组，可以动态的改变数组的长度。从输出的结果可以看出，它们都是按照被插入的顺序来保存元素。两者的不同之处不仅在于执行某些类型的操作时的性能，而且LinkedList包含的操作也多余ArrayList。]]></content>
      <categories>
        <category>容器</category>
      </categories>
      <tags>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[多线程的几种实现方式]]></title>
    <url>%2F2018%2F01%2F02%2F%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[什么是线程？ 线程是指程序在执行过程中，能够执行程序程序代码的一个执行单元。在Java语言中，线程有四种状态：运行、就绪、挂起和结束。 为什么要使用多线程 使用多哦线程可以减少程序的相应时间。 多CPU或多核计算机本身就具有执行多线程的能力。 与进程相比，线程的创建和切换开销更小。 使用多线程能简化程序的结构，使程序便于维护和理解。一个非常复杂的进程可以分成多个线程来执行。 基本的线程机制在使用线程时，CPU将轮流给每个任务分配其占用时间。每个任务都觉得自己在一直占用着CPU,但事实上CPU时间是划分成片段分配给所有的任务。线程可以使你从这个层次抽身出来。注意：当系统使用时间切片机制时，CPU轮流给每个任务分配时间，例如Windows（线程优先级和时间片轮转调度）操作系统。但有些操作系统采用FIFO模型，除非有高优先级的线程被唤醒，否则当前线程将一直运行，直至阻塞或终止。 如何实现Java多线程继承Thread类，重写run()方法Thread 本质上也是实现了Runnable接口的一个实例，它代表一个线程的实例，并且，启动线程的唯一方法就是通过Thread类的start()方法。start()方法是一个native(本地)方法，它将启动一个新线程，并执行一个run()方法(Thread中提供的run()方法是一个空方法)。这种方式通过自定义直接继承Thread，并重写run()方法，就可以启动新线程并执行自己定义的run()方法。调用start()方法后并不是立即执行多线程代码，而是使得该线程变成可运行态，什么时候运行多线程是由CPU调度决定的 1234567891011class MyThread extends Thread&#123; public void run()&#123; System.out.println(&quot;Thread body&quot;); &#125; &#125; public class Test&#123; public static void main(String[] args)&#123; MyThread thread=new MyThread(); thread.run(); &#125; &#125; 实现Runnable接口，并实现该接口的run()方法主要步骤：1） 自定义类并实现Runnable接口，并实现run()方法。2） 创建Thread对象，用实现Runnable接口的对象作为参数实例化该Thread对象。3） 调用Thread的start()方法。 123456789101112class MyThread implements Runnable&#123; public void run()&#123; System.out.println(&quot;Thread body&quot;); &#125;&#125;public class Test&#123; public static void main(String[] args)&#123; MyThread thread=new MyThread(); Thread t=new Thread(thread); t.start(); &#125;&#125; 以上两种是实现多线程最常用的方法。 其实不管是通过继承Thread类还是通过使用Runnable接口来实现多线程的方法，最终还是通过Thread的对象的API来控制线程的。 实现Callable接口，重写call()方法Callable接口实际上是属于Executor框架的功能类，Callable接口与Runnable接口的功能类类似，但提供了比Runnable更强大的功能，主要表现在以下三点：1）Callable可以在任务结束后提供一个返回值，Runnable无法提供这个功能。2）Callable中的call()方法可以抛出异常，而Runnable的run()方法无法抛出异常。3）运行Callable可以拿到一个Future对象，Future对象表示异步计算的结果，可以使用Future来监视目标线程调用call()方法的情况，当调用Future的get()方法以获取结果时，当前线程就会阻塞，直到call()方法结束返回结果。 12345678910111213141516171819202122public class CallableAndFuture&#123; //创建线程类 public static class CallableTest implements Callable&lt;String&gt;&#123; @Override public String call() throws Exception &#123; return &quot;欢迎来到我的博客！&quot;; &#125; &#125; public static void main(String[] args)&#123; ExecutorService threadPool= Executors.newSingleThreadExecutor(); //启动线程 Future&lt;String&gt; future=threadPool.submit(new CallableTest()); try &#123; System.out.println(&quot;waiting thread to finish&quot;); //等待线程结束，并获取返回结果 System.out.println(future.get()); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125;&#125; 上述程序的输出结果为： 以上3中方式中，前两种方式线程执行完后都没有返回值，只有最后一种带有返回值的，但是当需要使用多线程时，一般最好是使用实现Runnable接口的方式。因为Thread类定义的多中方法可以被派生类使用或者重写。但是只有run()方法是必须被重写的，在run()方法中实现了这个线程的主要功能。]]></content>
      <categories>
        <category>线程</category>
      </categories>
      <tags>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git总结]]></title>
    <url>%2F2018%2F01%2F01%2Fgit%2F</url>
    <content type="text"><![CDATA[git 简介git 是一款分布式的版本控制系统，其核心是分支，分支的意义在于可以将项目代码按照功能和模块拆分为不同的分支。在 git 中，工作目录下面的所有文件都不外乎两种状态： 已跟踪和未跟踪。 已跟踪文件是指已经被纳入git中，在版本控制器中有它们的记录，但是当我们对文件进行修改之后，文件变得和git中的不一样，那么它就属于未跟踪文件。初次克隆某个仓库时，所有文件都属于已跟踪文件。 git 常用指令git pull作用 将远程代码仓库里的代码下载下来并自动整合到当前工作分支 用法： git pull origin master 将origin这个版本库中的代码更新到本地的master主支，类似于SVN的update git add作用 是将当前更改或者新增的文件加入到Git的索引中，加入到Git的索引中就表示记入了版本历史中，这也是提交之前所需要执行的一步 用法： git add app/model/user.java 增加app/model/user.java文件到Git的索引中,该功能类似于SVN的add git rm作用 从当前的工作空间中和索引中删除文件 用法： git rm app/model/user.java 删除工作空间中或者索引中的app/model/user.java文件，该功能类似于SVN的rm、del git commit作用 将所有添加到索引库的文件添加到本地仓库文件一旦commit之后，就会在git中形成一个历史版本，以后无论怎么变都能够找到此次提交的记录。 用法： git commit -m story #3, add user model 提交的时候必须用-m来输入一条提交信息，该功能类似于SVN中的commit git push作用 将本地仓库中的修改推送到远程仓库 用法：git push origin 将本地的代码推送到名为origin的远程版本库中 git log作用 查看git的历史日志 该功能类似于SVN的log git revert作用 还原一个版本的修改，必须提供一个具体的Git版本号，Git的版本号都是生成的一个哈希值 用法：git revert bbaf6fb5060b4875b18ff9ff637ce118256d6f20]]></content>
      <categories>
        <category>环境</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F12%2F30%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
